on: [push, pull_request]
name: Build Pipeline
jobs:
  check:
    name: Check on ${{ matrix.host }} against ${{ matrix.toolchain }} Rust
    strategy:
      fail-fast: false
      matrix:
        include:
          - { toolchain: stable, host: ubuntu-22.04 }
          - { toolchain: nightly, host: macos-12 }
    runs-on: ${{ matrix.host }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3.3.0

      - name: Install ${{ matrix.toolchain }} toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: actions/cache@v3.2.3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}-check
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}-check
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}

      - name: Check formatting
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check

      - name: Static analysis with clippy
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy

      - name: Run tests
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test

      - name: Check for security issues
        uses: actions-rs/audit-check@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  build:
    name: ${{ matrix.profile == 'debug' && 'Debug build' || 'Build' }} ${{ matrix.desc }} (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - { desc: arm-mac,                    target: aarch64-apple-darwin,               host: macos-12,         profile: release,     toolchain: stable }
          - { desc: arm-mac-dbg,                target: aarch64-apple-darwin,               host: macos-12,         profile: debug,       toolchain: stable }
          - { desc: intel-mac,                  target: x86_64-apple-darwin,                host: macos-12,         profile: release,     toolchain: stable }
          - { desc: intel-mac-dbg,              target: x86_64-apple-darwin,                host: macos-12,         profile: debug,       toolchain: stable }
          - { desc: arm-linux,                  target: armv7-unknown-linux-gnueabihf,      host: ubuntu-22.04,     profile: release,     toolchain: stable }
          - { desc: arm-linux-dbg,              target: armv7-unknown-linux-gnueabihf,      host: ubuntu-22.04,     profile: debug,       toolchain: stable }
          - { desc: arm-linux-static,           target: armv7-unknown-linux-musleabihf,     host: ubuntu-22.04,     profile: release,     toolchain: stable }
          - { desc: arm-linux-static-dbg,       target: armv7-unknown-linux-musleabihf,     host: ubuntu-22.04,     profile: debug,       toolchain: stable }
          - { desc: arm64-linux,                target: aarch64-unknown-linux-gnu,          host: ubuntu-22.04,     profile: release,     toolchain: stable }
          - { desc: arm64-linux-dbg,            target: aarch64-unknown-linux-gnu,          host: ubuntu-22.04,     profile: debug,       toolchain: stable }
          - { desc: arm64-linux-static,         target: aarch64-unknown-linux-musl,         host: ubuntu-22.04,     profile: release,     toolchain: stable }
          - { desc: arm64-linux-static-dbg,     target: aarch64-unknown-linux-musl,         host: ubuntu-22.04,     profile: debug,       toolchain: stable }
          - { desc: x86_64-linux,               target: x86_64-unknown-linux-gnu,           host: ubuntu-22.04,     profile: release,     toolchain: stable }
          - { desc: x86_64-linux-dbg,           target: x86_64-unknown-linux-gnu,           host: ubuntu-22.04,     profile: debug,       toolchain: stable }
          - { desc: x86_64-linux-static,        target: x86_64-unknown-linux-musl,          host: ubuntu-22.04,     profile: release,     toolchain: stable }
          - { desc: x86_64-linux-static-dbg,    target: x86_64-unknown-linux-musl,          host: ubuntu-22.04,     profile: debug,       toolchain: stable }
    runs-on: ${{ matrix.host }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3.3.0

      - name: Install ${{ matrix.toolchain }} toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      - name: Set up cargo cache
        uses: actions/cache@v3.2.3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}-build
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}-build
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ matrix.profile }}
            cargo-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}

      - name: Build ${{ matrix.profile }} archive
        run: make dist
        env:
          CARGO: cross
          DEBUG: ${{ matrix.profile == 'debug' && 1 || 0 }}
          RELEASE: ${{ startsWith(github.ref, 'refs/tags/') && 1 || 0 }}
          SUFFIX: ${{ matrix.desc }}
          TARGET: ${{ matrix.target }}

      - name: Upload ${{ matrix.profile }} binary
        uses: actions/upload-artifact@v3.1.2
        with:
          name: distribution-${{ matrix.desc }}-${{ matrix.target }}-${{ matrix.profile }}
          path: prometheus-weathermen-*.tar.zz
          if-no-files-found: error

  release:
    needs: [check, build]
    name: Release
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3.0.2
        id: download

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v0.1.15
        with:
          fail_on_unmatched_files: true
          # Nested because for each archive a sub-folder of the same name is create to avoid conflicts when downloading
          files: ${{ steps.download.outputs.download-path }}/prometheus-weathermen-*.tar.zz/prometheus-weathermen-*.tar.zz
          generate_release_notes: true
